<?xml version="1.1" encoding="UTF-8" standalone="no"?>
<databaseChangeLog
  xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

  <changeSet author="CONNECT_APP" id="ITER_99_ORGANISATION_TYPE_INITAL_DATA">
    <sql>
      INSERT INTO [dbo].[ORGANISATION_TYPE](NAME, LEVEL, DESCRIPTION) VALUES('WHOLESALER', 4, 'This is Wholesaler organisation');
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_99_ESHOP_ROLE_WHOLESALER_INITAL_DATA">
    <sql>
      DECLARE @ADMIN_ROLE_TYPE INT = (SELECT ID FROM ROLE_TYPE WHERE NAME = 'ADMIN')
      INSERT INTO [dbo].[ESHOP_ROLE](NAME, ROLE_TYPE_ID, DESCRIPTION) VALUES('FINAL_USER_ADMIN', @ADMIN_ROLE_TYPE, 'Final User Admin Role');
      DECLARE @NORMAL_USER_ROLE_TYPE INT = (SELECT ID FROM ROLE_TYPE WHERE NAME = 'NORMAL_USER')
      INSERT INTO [dbo].[ESHOP_ROLE](NAME, ROLE_TYPE_ID, DESCRIPTION) VALUES('FINAL_NORMAL_USER', @NORMAL_USER_ROLE_TYPE, 'Final Normal User Role')
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_99_ESHOP_CLIENT_RESOURCE_TABLE">
    <sql>
      CREATE TABLE [dbo].[ESHOP_CLIENT_RESOURCE](
      [ID] [int] IDENTITY(1,1) NOT NULL,
      [NAME] [varchar](255) NOT NULL,
      [DESCRIPTION] [varchar](500) NOT NULL,
      [ACTIVE] [bit] NOT NULL,
      PRIMARY KEY CLUSTERED
      ([ID] ASC)
      WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY =
      OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
      ON [PRIMARY]) ON [PRIMARY];
    </sql>
  </changeSet>
  <changeSet author="CONNECT_APP" id="ITER_99_ESHOP_CLIENT_RESOURCE_INITIAL_DATA">
    <sql>
      INSERT INTO [dbo].[ESHOP_CLIENT_RESOURCE] (NAME, DESCRIPTION,
      ACTIVE) VALUES ('sag-rest', 'SAG Core Rest API Services', 1);
      INSERT INTO [dbo].[ESHOP_CLIENT_RESOURCE] (NAME, DESCRIPTION,
      ACTIVE) VALUES ('sag-admin', 'SAG Core Admin API Services', 1);
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_99_ESHOP_CLIENT_TABLE">
    <sql>
      CREATE TABLE [dbo].[ESHOP_CLIENT](
      [ID] [int] IDENTITY(1,1) NOT NULL,
      [CLIENT_NAME] [varchar](255) NOT NULL,
      [CLIENT_SECRET] [varchar](500) NOT NULL,
      [RESOURCE_ID] [int] NOT NULL,
      [ACTIVE] [bit] NOT NULL,
      PRIMARY KEY CLUSTERED
      ([ID] ASC)
      WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY =
      OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
      ON [PRIMARY]) ON [PRIMARY];
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_99_ESHOP_CLIENT_INITIAL_DATA">
    <sql>
      DECLARE @REST_ID INT = (select ID from ESHOP_CLIENT_RESOURCE
      where NAME='sag-rest')
      INSERT INTO [dbo].[ESHOP_CLIENT]
      (CLIENT_NAME, CLIENT_SECRET, RESOURCE_ID, ACTIVE) VALUES
      ('eshop-web', 'Fd73piTIWo3ugFdHNy9hpe3IRkFd1x7TeNFraqQ',
      @REST_ID, 1);

      DECLARE @ADMIN_ID INT = (select ID from ESHOP_CLIENT_RESOURCE where
      NAME='sag-admin')
      INSERT INTO [dbo].[ESHOP_CLIENT] (CLIENT_NAME,
      CLIENT_SECRET, RESOURCE_ID, ACTIVE) VALUES ('eshop-admin',
      'FdmY8MuouKxlsFd6aZdGhlaFHwFdeQZ6gCTGbNg', @ADMIN_ID, 1);
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_99_ESHOP_CLIENT_WHOLESALER_WBB_CLIENT_INITIAL_DATA">
    <sql>
      DECLARE @REST_ID INT = (select ID from ESHOP_CLIENT_RESOURCE
      where NAME='sag-rest')
      INSERT INTO [dbo].[ESHOP_CLIENT]
      (CLIENT_NAME, CLIENT_SECRET, RESOURCE_ID, ACTIVE) VALUES
      ('eshop-wholesaler', 'Fd73piTIWo3ugFdHNy9hpe3IRkFd1x7TeNFraqQ',
      @REST_ID, 1);

    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_99_CLIENT_ROLE_TABLE">
    <sql>
      CREATE TABLE [dbo].[CLIENT_ROLE](
      [ID] [bigint] IDENTITY(1,1) NOT NULL,
      [CLIENT_ID] [int] NOT NULL,
      [ROLE_ID] [int] NOT NULL,
      PRIMARY KEY CLUSTERED
      ([ID] ASC)
      WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY =
      OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
      ON [PRIMARY]) ON [PRIMARY];
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_99_CLIENT_ROLE_INITIAL_DATA">
    <sql>
      DECLARE @ESHOP_WEB_CLIENT_ID INT = (select ID from ESHOP_CLIENT
      where CLIENT_NAME='eshop-web')
      DECLARE @ROLE_USER_ADMIN_ID INT =
      (select ID from ESHOP_ROLE where NAME = 'USER_ADMIN')
      INSERT INTO
      [dbo].[CLIENT_ROLE] (CLIENT_ID, ROLE_ID)
      VALUES(@ESHOP_WEB_CLIENT_ID, @ROLE_USER_ADMIN_ID)

      DECLARE @ROLE_NORMAL_USER_ID INT = (select ID from ESHOP_ROLE where NAME =
      'NORMAL_USER')
      INSERT INTO [dbo].[CLIENT_ROLE] (CLIENT_ID, ROLE_ID)
      VALUES(@ESHOP_WEB_CLIENT_ID, @ROLE_NORMAL_USER_ID)

      DECLARE @ROLE_GROUP_ADMIN_ID INT = (select ID from ESHOP_ROLE where NAME =
      'GROUP_ADMIN')
      INSERT INTO [dbo].[CLIENT_ROLE] (CLIENT_ID, ROLE_ID)
      VALUES(@ESHOP_WEB_CLIENT_ID, @ROLE_GROUP_ADMIN_ID)

      DECLARE @ROLE_MARKETING_ASSISTANT_ID INT = (select ID from ESHOP_ROLE where
      NAME = 'MARKETING_ASSISTANT')
      INSERT INTO [dbo].[CLIENT_ROLE]
      (CLIENT_ID, ROLE_ID) VALUES(@ESHOP_WEB_CLIENT_ID,
      @ROLE_MARKETING_ASSISTANT_ID)

      DECLARE @ROLE_SALES_ASSISTANT_ID INT = (select ID from ESHOP_ROLE where NAME
      = 'SALES_ASSISTANT')
      INSERT INTO [dbo].[CLIENT_ROLE] (CLIENT_ID,
      ROLE_ID) VALUES(@ESHOP_WEB_CLIENT_ID, @ROLE_SALES_ASSISTANT_ID)

      DECLARE @ESHOP_ADMIN_CLIENT_ID INT = (select ID from ESHOP_CLIENT
      where CLIENT_NAME='eshop-admin')
      DECLARE @ROLE_SYS_ADMIN_ID INT =
      (select ID from ESHOP_ROLE where NAME = 'SYSTEM_ADMIN')
      INSERT INTO
      [dbo].[CLIENT_ROLE] (CLIENT_ID, ROLE_ID)
      VALUES(@ESHOP_ADMIN_CLIENT_ID, @ROLE_SYS_ADMIN_ID)
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_99_V_ESHOP_CLIENT_VIEW">
    <sql>
      CREATE VIEW [V_ESHOP_CLIENT] AS
      SELECT ec.ID AS ID,
      ec.CLIENT_NAME AS CLIENT_NAME,
      ec.CLIENT_SECRET AS CLIENT_SECRET,
      ecr.NAME AS RESOURCE_ID,
      STUFF(
      (
      SELECT CAST(',' AS varchar(max)) + er.NAME
      FROM ESHOP_ROLE er
      INNER JOIN CLIENT_ROLE cr ON cr.ROLE_ID = er.ID
      WHERE cr.CLIENT_ID = ec.ID
      FOR XML PATH(''), TYPE
      ).value('.', 'varchar(max)'), 1, 1, '') AS CLIENT_ROLES
      FROM ESHOP_CLIENT ec
      LEFT JOIN ESHOP_CLIENT_RESOURCE ecr ON ecr.ID = ec.RESOURCE_ID
      WHERE ec.ACTIVE = 1 AND ecr.ACTIVE = 1
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_103_ORDER_HISTORY_ADD_COLUMN_FINAL_CUSTOMER_ORDER_ID">
    <sql>
        ALTER TABLE [dbo].[ORDER_HISTORY] ADD [FINAL_CUSTOMER_ORDER_ID] [bigint] NULL
        ALTER TABLE [dbo].[ORDER_HISTORY] ADD [GOODS_RECEIVER_ID] [bigint] NULL
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_103_ORDER_HISTORY_ADD_TABLE_FINAL_CUSTOMER_ORDER">
    <sql>
      CREATE TABLE [dbo].[FINAL_CUSTOMER_ORDER] (
        [ID] [bigint] IDENTITY(1, 1) NOT NULL,
        [USER_ID] [bigint] NOT NULL,
        [ORG_ID] [bigint] NOT NULL,
        [STATUS] [varchar] (50) NOT NULL,
        [REFERENCE] [varchar] (254) NULL,
        [BRANCH_REMARK] [varchar] (254) NULL,
        [DATE] [datetime] DEFAULT getdate() NOT NULL,
        [TOTAL_GROSS_PRICE] DECIMAL(18, 10),
        PRIMARY KEY (ID)
      )
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_103_ORDER_HISTORY_ADD_TABLE_FINAL_CUSTOMER_ORDER_ITEM">
    <sql>
      CREATE TABLE [dbo].[FINAL_CUSTOMER_ORDER_ITEM] (
        [ID] [bigint] IDENTITY(1, 1) NOT NULL,
	    [FINAL_CUSTOMER_ORDER_ID] [bigint] NOT NULL,
	    [VEHICLE_ID] [varchar] (20) NULL,
	    [ARTICLE_ID] [varchar] (20) NOT NULL,
	    [QUANTITY] [int] NOT NULL,
	    [VEHICLE_DESC] [varchar] (255),
	    [ARTICLE_DESC] [varchar] (255),
	    [TYPE] [varchar] (50),
	    [GEN_ART_DESCRIPTION] [varchar] (255),
        [SUPPLIER] [varchar](255),
        [BRAND] [varchar] (255),
        [PRODUCT_ADDON] [varchar] (255),
        [IMAGES] [varchar] (max),
        [REFERENCE] [varchar] (255),
        [GROSS_PRICE] [decimal](18, 10),
        [SALES_QUANTITY] [int],
        [NET_PRICE] [decimal](18, 10))
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_103_ORGANISATION_TYPE_UPDATE_FINAL_CUSTOMER">
    <sql>
      UPDATE ORGANISATION_TYPE SET NAME = 'FINAL_CUSTOMER', DESCRIPTION = 'This is Wholesaler organisation' WHERE [LEVEL] = 4;
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_103_ORGANISATION_COLLECTION_TABLE">
    <sql>
      CREATE TABLE [dbo].[ORGANISATION_COLLECTION](
	    [ID] [int] IDENTITY(1,1) NOT NULL,
	    [NAME] [varchar](150) NOT NULL,
	    [ORG_ID] [int] NOT NULL,
	    [DEFAULT] [bit] NULL,
	    [DESCRIPTION] [varchar](255) NULL,
	    CONSTRAINT [PK_ORGANISATION_COLLECTION] PRIMARY KEY CLUSTERED
	 (
	    [ID] ASC
	 )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	 ) ON [PRIMARY];

	 ALTER TABLE [dbo].[ORGANISATION_COLLECTION] ADD CONSTRAINT FK_ORG_ID FOREIGN KEY (ORG_ID) REFERENCES [dbo].[ORGANISATION] (ID);
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_103_ORG_COLLECTION_SETTINGS_TABLE">
    <sql>
      CREATE TABLE [dbo].[ORG_COLLECTION_SETTINGS](
	    [ID] [int] IDENTITY(1,1) NOT NULL,
	    [COLLECTION_ID] [int] NOT NULL,
	    [SETTING_KEY] [varchar](255) NOT NULL,
	    [SETTING_VALUE] [varchar](255) NULL,
	    CONSTRAINT [PK_ORG_COLLECTION_SETTINGS] PRIMARY KEY CLUSTERED
	(
	    [ID] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY];
	ALTER TABLE [dbo].[ORG_COLLECTION_SETTINGS] ADD CONSTRAINT FK_COLLECTION_ID FOREIGN KEY (COLLECTION_ID) REFERENCES [dbo].[ORGANISATION_COLLECTION] (ID);
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_103_COLLECTION_RELATION_TABLE">
    <sql>
      CREATE TABLE [dbo].[COLLECTION_RELATION](
	    [ID] [int] IDENTITY(1,1) NOT NULL,
	    [COLLECTION_ID] [int] NOT NULL,
	    [CUSTOMER_ID] [int] NOT NULL,
	    CONSTRAINT [UK_COLLECTION_RELATION] UNIQUE ([COLLECTION_ID], [CUSTOMER_ID]),
	    CONSTRAINT [PK_COLLECTION_RELATION] PRIMARY KEY CLUSTERED
	(
	    [ID] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY];

	ALTER TABLE [dbo].[COLLECTION_RELATION] ADD CONSTRAINT FK_COLLECTION_RELATION_ID FOREIGN KEY (COLLECTION_ID) REFERENCES [dbo].[ORGANISATION_COLLECTION] (ID);
	ALTER TABLE [dbo].[COLLECTION_RELATION] ADD CONSTRAINT FK_CUSTOMER_RELATION_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES [dbo].[ORGANISATION] (ID);
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_103_ORGANISATION_COLLECTION_INITIAL_DATA">
    <sql>
      INSERT INTO [dbo].[ORGANISATION_COLLECTION] (NAME, ORG_ID, [DEFAULT], DESCRIPTION)
	  SELECT DISTINCT o.NAME, o.ID, 1, 'This is the Default Collection'
	  FROM [dbo].[ORGANISATION] o
	  JOIN [dbo].[ORGANISATION_TYPE] ot ON o.ORGTYPE_ID = ot.ID
	  WHERE ot.[LEVEL] = 1 OR ot.[LEVEL] = 2;
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_103_ORG_COLLECTION_SETTINGS_INITIAL_DATA">
    <sql>
	  INSERT INTO [dbo].[ORG_COLLECTION_SETTINGS] (COLLECTION_ID, SETTING_KEY, SETTING_VALUE)
	  SELECT oc.ID, os.SETTING_KEY, os.SETTING_VALUE
	  FROM [dbo].[ORGANISATION_COLLECTION] oc
	  JOIN [dbo].[ORGANISATION_SETTINGS] os ON os.ORGANISATION_ID = oc.ORG_ID;
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_103_COLLECTION_RELATION_INITIAL_DATA">
    <sql>
	  INSERT INTO [dbo].[COLLECTION_RELATION] (COLLECTION_ID, CUSTOMER_ID)
	  SELECT oc.ID,och.ID
	  FROM [dbo].[ORGANISATION_COLLECTION] oc
	  JOIN [dbo].[ORGANISATION] op ON op.ID = oc.ORG_ID
	  JOIN [dbo].[ORGANISATION] och ON och.PARENT_ID = op.ID
	  JOIN [dbo].[ORGANISATION_TYPE] ot ON och.ORGTYPE_ID = ot.ID
	  WHERE ot.[LEVEL] = 3;
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_103_COLLECTION_RELATION_INITIAL_DATA_FOR_SALE">
    <sql>
	  INSERT INTO [dbo].[COLLECTION_RELATION] (COLLECTION_ID, CUSTOMER_ID)
	  SELECT oc.ID, org.ID
	  FROM [dbo].[ORGANISATION_COLLECTION] oc
	  JOIN [dbo].[ORGANISATION] org ON org.ID = oc.ORG_ID
	  JOIN [dbo].[ORGANISATION_TYPE] ot ON org.ORGTYPE_ID = ot.ID
	  WHERE ot.[LEVEL] = 1;
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_103_COLLECTION_RELATION_CHANGE_COLUMN_NAME">
    <sql>
    	EXEC sp_rename 'COLLECTION_RELATION.CUSTOMER_ID', 'ORGANISATION_ID', 'COLUMN';
    </sql>
  </changeSet>

  <changeSet id="CONNECT_APP" author="ITER_104_ADD_COLUMN_IS_ACTIVE_COLLECTION_RELATION">
    <sql>
      ALTER TABLE dbo.COLLECTION_RELATION ADD IS_ACTIVE bit NOT NULL DEFAULT 1;
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_104_WSS_ADD_TABLE_FINAL_CUSTOMER_PROPERTY">
    <sql>
      CREATE TABLE [dbo].[FINAL_CUSTOMER_PROPERTY](
        [ID] [bigint] IDENTITY(1, 1) NOT NULL,
        [ORG_ID] [bigint] NOT NULL,
        [SETTING_KEY] [varchar] (50) NOT NULL,
        [VALUE] [varchar] (254) NOT NULL,
      )
    </sql>
  </changeSet>

  <changeSet id="CONNECT_APP" author="ITER_104_ADD_COLUMN_SHORTNAME_ORGANISATION_COLLECTION">
    <sql>
      ALTER TABLE dbo.ORGANISATION_COLLECTION ADD SHORTNAME VARCHAR(50);
    </sql>
  </changeSet>

  <changeSet id="CONNECT_APP" author="ITER_104_ADD_COLUMN_IS_ACTIVE_COLLECTION_RELATION">
    <sql>
      ALTER TABLE dbo.COLLECTION_RELATION ADD IS_ACTIVE bit NOT NULL DEFAULT 1;
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_104_ADD_WHOLESALER_PERMISSION">
    <sql>
      	INSERT INTO ESHOP_FUNCTION(FUNCTION_NAME,DESCRIPTION,RELATIVE_URL) VALUES('WHOLESALER','Function to work with wholesaler','/wholesaler**')
		INSERT INTO ESHOP_PERMISSION(PERMISSION,DESCRIPTION,PERMISSION_KEY) VALUES('WHOLESALER','Permission to work with wholesaler module','WHOLESALER')

		DECLARE @wsPerm INT = (SELECT ID FROM ESHOP_PERMISSION WHERE PERMISSION='WHOLESALER')
		DECLARE @wsFunction INT = (SELECT ID FROM ESHOP_FUNCTION WHERE FUNCTION_NAME='WHOLESALER')
		INSERT INTO PERM_FUNCTION(PERM_ID,FUNCTION_ID) VALUES(@wsPerm,@wsFunction)
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_104_ADD_VIEW_V_FINAL_CUSTOMER_ORDER">
    <sql>
      <!-- #4688 REPLACE &lt;&gt; by <> -->
      CREATE VIEW [dbo].[V_FINAL_CUSTOMER_ORDER] AS
        SELECT DISTINCT
          FO.DATE,
          FO.ID AS ID,
          O.NAME AS COMPANY_NAME,
          (SELECT VALUE FROM FINAL_CUSTOMER_PROPERTY WHERE ORG_ID = FO.ORG_ID and SETTING_KEY='ADDRESS_1') AS ADDRESS,
          (SELECT VALUE FROM FINAL_CUSTOMER_PROPERTY WHERE ORG_ID = FO.ORG_ID and SETTING_KEY='POSTCODE') AS POSTCODE,
          (SELECT VALUE FROM FINAL_CUSTOMER_PROPERTY WHERE ORG_ID = FO.ORG_ID and SETTING_KEY='CUSTOMER_NUMBER') AS CUSTOMER_NUMBER,
		  (SELECT
			STUFF((SELECT ';' + t2.VEHICLE_DESC
				FROM FINAL_CUSTOMER_ORDER_ITEM t2
				WHERE t1.ID = t2.FINAL_CUSTOMER_ORDER_ID
				AND t2.VEHICLE_DESC IS NOT NULL AND t2.VEHICLE_DESC &lt;&gt; ''
				FOR XML PATH('')), 1, 1, '')
			FROM FINAL_CUSTOMER_ORDER t1
			WHERE ID = FO.ID
			GROUP BY ID) AS VEHICLE_DESCS,
          (SELECT TOP(1) ARTICLE_DESC FROM FINAL_CUSTOMER_ORDER_ITEM WHERE FINAL_CUSTOMER_ORDER_ID = FO.ID) AS ARTICLE_DESC,
          (SELECT USERNAME FROM ESHOP_USER WHERE ID = FO.USER_ID) AS USERNAME,
          FO.STATUS,
          FO.ORG_ID,
          FO.TOTAL_GROSS_PRICE
        FROM
          FINAL_CUSTOMER_ORDER FO
          LEFT JOIN FINAL_CUSTOMER_PROPERTY FP
          ON FP.ORG_ID = FO.ORG_ID
          AND (FP.SETTING_KEY = 'ADDRESS_1' OR FP.SETTING_KEY = 'POSTCODE' OR FP.SETTING_KEY = 'CUSTOMER_NUMBER')
		  LEFT JOIN ORGANISATION O ON O.ID=FO.ORG_ID
		  WHERE FO.STATUS &lt;&gt; 'DELETED'
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_104_ADD_VIEW_V_FINAL_CUSTOMER_ORDER_STATUS">
    <sql>
      CREATE VIEW [dbo].[V_FINAL_CUSTOMER_ORDER_STATUS] AS
        SELECT DISTINCT
	      O.ID AS ORG_ID,
	      PARENT.ORG_CODE,
		  (SELECT COUNT(*) FROM FINAL_CUSTOMER_ORDER WHERE ORG_ID = O.ID AND STATUS='OPEN') AS 'OPEN_ORDER',
		  (SELECT COUNT(*) FROM FINAL_CUSTOMER_ORDER WHERE ORG_ID = O.ID AND STATUS='NEW') AS 'NEW_ORDER',
		  (SELECT COUNT(*) FROM FINAL_CUSTOMER_ORDER WHERE ORG_ID = O.ID AND STATUS='PLACED') AS 'PLACED_ORDER'
        FROM
	      ORGANISATION O
		  LEFT JOIN ORGANISATION PARENT ON O.PARENT_ID = PARENT.ID
		  LEFT JOIN FINAL_CUSTOMER_ORDER FO ON FO.ORG_ID = O.ID
		  WHERE O.ORG_CODE is null
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_104_COLLECTION_RELATION_INITIAL_AFF_COLLECTION">
    <sql>
	  INSERT INTO [dbo].[COLLECTION_RELATION] (COLLECTION_ID, ORGANISATION_ID)
	  SELECT oc.ID, org.ID
	  FROM [dbo].[ORGANISATION_COLLECTION] oc
	  JOIN [dbo].[ORGANISATION] org ON org.ID = oc.ORG_ID
	  JOIN [dbo].[ORGANISATION_TYPE] ot ON org.ORGTYPE_ID = ot.ID
	  WHERE ot.[LEVEL] = 2;
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_104_DROP_ORGANISATION_COLLECTION_COLUMN">
    <sql>
    <!-- Note: Run after ITER_104_COLLECTION_RELATION_INITIAL_AFF_COLLECTION -->
        EXEC sp_rename 'ORGANISATION_COLLECTION.ORG_ID', 'AFFILIATE_ID', 'COLUMN';
        ALTER TABLE [dbo].[ORGANISATION_COLLECTION] DROP COLUMN [DEFAULT];
    </sql>
  </changeSet>


   <changeSet author="CONNECT_APP" id="ITER_105_TABLE_COLLECTION_PERMISSION">
       <sql>
           CREATE TABLE [dbo].[COLLECTION_PERMISSION](
           [ID] [bigint] IDENTITY(1, 1) NOT NULL,
           [COLLECTION_ID] [int] NOT NULL,
           [ESHOP_PERMISSION_ID] [int] NOT NULL
           )
       </sql>
   </changeSet>

   <changeSet author="CONNECT_APP" id="ITER_105_ADD_DMS_PERMISSION">
     <sql>
       INSERT INTO ESHOP_PERMISSION (PERMISSION,	DESCRIPTION,	CREATED_BY,	CREATED_DATE,	MODIFIED_BY,	MODIFIED_DATE,	PERMISSION_KEY)
       VALUES('DMS',	'Permission to work with dms module',	1,	'2019-05-03 10:59:08.623',	NULL,	NULL,	'DMS')

       INSERT INTO ESHOP_FUNCTION (FUNCTION_NAME,	DESCRIPTION,	RELATIVE_URL)
       VALUES('DMS',	'DMS',	'/dms**')

       DECLARE @DMS_PERM_ID [int] = (SELECT ID FROM eshop_permission where PERMISSION='DMS')
       DECLARE @DMS_FUNCTION_ID [int] = (SELECT ID FROM ESHOP_FUNCTION where FUNCTION_NAME='DMS')
       INSERT INTO  PERM_FUNCTION(PERM_ID, FUNCTION_ID) VALUES(@DMS_PERM_ID, @DMS_FUNCTION_ID)
     </sql>
   </changeSet>

   <changeSet author="CONNECT_APP" id="ITER_105_ADD_TYRE_PERMISSION">
     <sql>
       INSERT INTO ESHOP_PERMISSION (PERMISSION,	DESCRIPTION,PERMISSION_KEY)
       VALUES('TYRE','Permission to work with tyre module','TYRE')

       INSERT INTO ESHOP_FUNCTION (FUNCTION_NAME,	DESCRIPTION,	RELATIVE_URL)
       VALUES('TYRE_URL_ACCESS','Function to work with tyres url at front-end','/tyres')

       INSERT INTO ESHOP_FUNCTION (FUNCTION_NAME,	DESCRIPTION,	RELATIVE_URL)
       VALUES('TYRE_API_SEARCH','Function to work with tyre search API at back-end','/search/tyre**')

       DECLARE @tyrePermissionId [int] = (SELECT ID FROM ESHOP_PERMISSION where PERMISSION='TYRE')
       DECLARE @tyreUrlAccessFunctionId [int] = (SELECT ID FROM ESHOP_FUNCTION where FUNCTION_NAME='TYRE_URL_ACCESS')
       DECLARE @tyreApiSearchFunctionId [int] = (SELECT ID FROM ESHOP_FUNCTION where FUNCTION_NAME='TYRE_API_SEARCH')

       INSERT INTO  PERM_FUNCTION(PERM_ID, FUNCTION_ID) VALUES(@tyrePermissionId, @tyreUrlAccessFunctionId)
       INSERT INTO  PERM_FUNCTION(PERM_ID, FUNCTION_ID) VALUES(@tyrePermissionId, @tyreApiSearchFunctionId)
     </sql>
   </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_106_VIEW_V_FINAL_CUSTOMER">
    <sql>
      CREATE VIEW [dbo].[V_FINAL_CUSTOMER] AS
      SELECT
      ORG.ID AS ORG_ID,
      ORG.NAME AS NAME,
      ORG.DESCRIPTION AS DESCRIPTION,
      ORG.PARENT_ID AS PARENT_ORG_ID,
      STUFF((SELECT CAST(';' AS varchar(max)) + FP.VALUE FROM FINAL_CUSTOMER_PROPERTY FP
      WHERE FP.ORG_ID = ORG.ID AND FP.SETTING_KEY = 'TYPE' FOR XML
      PATH(''), TYPE).value('.', 'varchar(max)'), 1, 1, '') AS
      FINAL_CUSTOMER_TYPE,
      STUFF((SELECT CAST(';' AS varchar(max)) + FP.VALUE FROM FINAL_CUSTOMER_PROPERTY FP
      WHERE FP.ORG_ID = ORG.ID AND FP.SETTING_KEY IN ('ADDRESS_1',
      'ADDRESS_2', 'POST_CODE', 'PLACE') FOR XML PATH(''),
      TYPE).value('.', 'varchar(max)'), 1, 1, '') AS ADDRESS_INFO,
      STUFF((SELECT CAST(';' AS varchar(max)) + FP.VALUE FROM
      FINAL_CUSTOMER_PROPERTY FP WHERE FP.ORG_ID = ORG.ID AND
      FP.SETTING_KEY IN ('SURNAME', 'FIRSTNAME') FOR XML PATH(''),
      TYPE).value('.', 'varchar(max)'), 1, 1, '') AS CONTACT_INFO
      FROM [dbo].ORGANISATION ORG
      INNER JOIN [dbo].ORGANISATION_TYPE ORG_TYPE ON ORG.ORGTYPE_ID =
      ORG_TYPE.ID
      WHERE ORG_TYPE.NAME = 'FINAL_CUSTOMER';
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_106_VIEW_V_COLLECTION_SEARCH">
    <sql>
		CREATE VIEW [dbo].[V_COLLECTION_SEARCH] AS
		SELECT temp.NAME COLLECTION_NAME,
		temp.SHORTNAME AFFILIATE,
		STUFF(
		(SELECT CAST(', ' AS varchar(max)) + L.ORG_CODE
		FROM ORGANISATION as L
		WHERE L.ID in (
		select top 5 LR.ORGANISATION_ID FROM COLLECTION_RELATION LR
		WHERE LR.COLLECTION_ID = temp.ID ) and L.ORGTYPE_ID='3'
		FOR XML PATH(''), TYPE
		)
		.value('.', 'varchar(max)'),1, 1,'') AS CUSTOMER_NR,
		temp.COLLECTION_SHORT_NAME COLLECTION_SHORT_NAME
		FROM (
		SELECT DISTINCT orgColl.ID, orgColl.NAME, aff.SHORTNAME, orgColl.SHORTNAME COLLECTION_SHORT_NAME from
		ORGANISATION_COLLECTION orgColl
		join COLLECTION_RELATION cl on cl.COLLECTION_ID = orgColl.ID
		join ORGANISATION org on org.ID = cl.ORGANISATION_ID
		join ORGANISATION aff on aff.ID = orgColl.AFFILIATE_ID
		where aff.SHORTNAME != 'sag'
		) AS temp
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_106_ADD_SHOP_TYPE_ESHOP_CART_ITEM">
    <sql>
      ALTER TABLE [dbo].[ESHOP_CART_ITEM] ADD [SHOPTYPE] varchar(50) DEFAULT NULL;
      </sql>
  </changeSet>
  
  <changeSet author="CONNECT_APP" id="ITER_106_UPDATE_WEEKLY_INVOICE_AX_CODE_CH_AX">
    <sql>
      UPDATE dbo.INVOICE_TYPE SET INVOICE_TYPE_NAME='WOCHENFAKT', INVOICE_TYPE_DESC='Wochenfaktura' 
      WHERE INVOICE_TYPE_CODE='WEEKLY_INVOICE';
      </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_106_ALTER_VIEW_V_FINAL_CUSTOMER">
    <sql>
      ALTER VIEW [dbo].[V_FINAL_CUSTOMER] AS
      SELECT
      ORG.ID AS ORG_ID,
      ORG.NAME AS NAME,
      ORG.DESCRIPTION AS DESCRIPTION,
      ORG.PARENT_ID AS PARENT_ORG_ID,
      STUFF((SELECT CAST(';' AS varchar(max)) + FP.VALUE FROM FINAL_CUSTOMER_PROPERTY FP
      WHERE FP.ORG_ID = ORG.ID AND FP.SETTING_KEY = 'TYPE' FOR XML
      PATH(''), TYPE).value('.', 'varchar(max)'), 1, 1, '') AS
      FINAL_CUSTOMER_TYPE,
      STUFF((SELECT CAST(';' AS varchar(max)) + FP.VALUE FROM FINAL_CUSTOMER_PROPERTY FP
      WHERE FP.ORG_ID = ORG.ID AND FP.SETTING_KEY IN ('STREET', 'POSTCODE', 'PLACE') ORDER BY 
      (CASE FP.SETTING_KEY  WHEN 'STREET' THEN 1 WHEN 'POSTCODE' THEN 2 WHEN 'PLACE' THEN 3 END) ASC FOR XML PATH(''),
      TYPE).value('.', 'varchar(max)'), 1, 1, '') AS ADDRESS_INFO,
      STUFF((SELECT CAST(';' AS varchar(max)) + FP.VALUE FROM
      FINAL_CUSTOMER_PROPERTY FP WHERE FP.ORG_ID = ORG.ID AND
      FP.SETTING_KEY IN ('SURNAME', 'FIRSTNAME')  ORDER BY 
      (CASE FP.SETTING_KEY  WHEN 'SURNAME' THEN 1 WHEN 'FIRSTNAME' THEN 2 END) ASC FOR XML PATH(''),
      TYPE).value('.', 'varchar(max)'), 1, 1, '') AS CONTACT_INFO
      FROM [dbo].ORGANISATION ORG
      INNER JOIN [dbo].ORGANISATION_TYPE ORG_TYPE ON ORG.ORGTYPE_ID =
      ORG_TYPE.ID
      WHERE ORG_TYPE.NAME = 'FINAL_CUSTOMER';
    </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_106_ALTER_VIEW_V_FINAL_CUSTOMER_CUSTOM_DELIMITER">
    <sql>
    ALTER VIEW [dbo].[V_FINAL_CUSTOMER] AS
      SELECT
      ORG.ID AS ORG_ID,
      ORG.NAME AS NAME,
      ORG.DESCRIPTION AS DESCRIPTION,
      ORG.PARENT_ID AS PARENT_ORG_ID,
      STUFF((SELECT CAST(' ' AS varchar(max)) + FP.VALUE FROM FINAL_CUSTOMER_PROPERTY FP
      WHERE FP.ORG_ID = ORG.ID AND FP.SETTING_KEY = 'TYPE' FOR XML
      PATH(''), TYPE).value('.', 'varchar(max)'), 1, 1, '') AS
      FINAL_CUSTOMER_TYPE,
      STUFF((SELECT CAST(' ' AS varchar(max)) + FP.VALUE FROM FINAL_CUSTOMER_PROPERTY FP
      WHERE FP.ORG_ID = ORG.ID AND FP.SETTING_KEY IN ('STREET', 'POSTCODE', 'PLACE') ORDER BY 
      (CASE FP.SETTING_KEY  WHEN 'STREET' THEN 1 WHEN 'POSTCODE' THEN 2 WHEN 'PLACE' THEN 3 END) ASC FOR XML PATH(''),
      TYPE).value('.', 'varchar(max)'), 1, 1, '') AS ADDRESS_INFO,
      STUFF((SELECT CAST(' ' AS varchar(max)) + FP.VALUE FROM
      FINAL_CUSTOMER_PROPERTY FP WHERE FP.ORG_ID = ORG.ID AND
      FP.SETTING_KEY IN ('SURNAME', 'FIRSTNAME')  ORDER BY 
      (CASE FP.SETTING_KEY  WHEN 'SURNAME' THEN 1 WHEN 'FIRSTNAME' THEN 2 END) ASC FOR XML PATH(''),
      TYPE).value('.', 'varchar(max)'), 1, 1, '') AS CONTACT_INFO
      FROM [dbo].ORGANISATION ORG
      INNER JOIN [dbo].ORGANISATION_TYPE ORG_TYPE ON ORG.ORGTYPE_ID =
      ORG_TYPE.ID
      WHERE ORG_TYPE.NAME = 'FINAL_CUSTOMER';
    </sql>
  </changeSet>

   <changeSet author="CONNECT_APP" id="ITER_108_ADD_HAYNESPRO_VIN_PERMISSION">
     <sql>
	   -- Haynespro
       INSERT INTO ESHOP_PERMISSION (PERMISSION,DESCRIPTION,PERMISSION_KEY)
       VALUES('HAYNESPRO','Permission to work with haynespro','HAYNESPRO')

       INSERT INTO ESHOP_FUNCTION (FUNCTION_NAME,DESCRIPTION,RELATIVE_URL)
       VALUES('HAYNESPRO','Function to work with haynespro','/haynespro**')

       DECLARE @haynesproPermissionId [int] = (SELECT ID FROM ESHOP_PERMISSION where PERMISSION='HAYNESPRO')
       DECLARE @haynesproFunctionId [int] = (SELECT ID FROM ESHOP_FUNCTION where FUNCTION_NAME='HAYNESPRO')
	
       INSERT INTO  PERM_FUNCTION(PERM_ID, FUNCTION_ID) VALUES(@haynesproPermissionId, @haynesproFunctionId)
	
	   -- Vin
	   INSERT INTO ESHOP_PERMISSION (PERMISSION,DESCRIPTION,PERMISSION_KEY)
       VALUES('VIN','Permission to work with vin','VIN')

       INSERT INTO ESHOP_FUNCTION (FUNCTION_NAME,DESCRIPTION,RELATIVE_URL)
       VALUES('VIN_API_SEARCH','Function to work with vin search API','/gtmotive/vehicle/search-by-vin**')

       INSERT INTO ESHOP_FUNCTION (FUNCTION_NAME,DESCRIPTION,RELATIVE_URL)
       VALUES('VIN_API_PACKAGES','Function to work with vin packages API','/vin/packages**')

       DECLARE @vinPermissionId [int] = (SELECT ID FROM ESHOP_PERMISSION where PERMISSION='VIN')
       DECLARE @vinSearchFunctionId [int] = (SELECT ID FROM ESHOP_FUNCTION where FUNCTION_NAME='VIN_API_SEARCH')
	   DECLARE @vinPackagesFunctionId [int] = (SELECT ID FROM ESHOP_FUNCTION where FUNCTION_NAME='VIN_API_PACKAGES')
	
       INSERT INTO  PERM_FUNCTION(PERM_ID, FUNCTION_ID) VALUES(@vinPermissionId, @vinSearchFunctionId)
	   INSERT INTO  PERM_FUNCTION(PERM_ID, FUNCTION_ID) VALUES(@vinPermissionId, @vinPackagesFunctionId)
     </sql>
   </changeSet>	
   
   <changeSet author="CONNECT_APP" id="ITER_108_ALTER_VIEW_V_USER_DETAIL">
    <sql>
		ALTER VIEW [dbo].[V_USER_DETAIL]
		with schemabinding
		AS
		SELECT U.ID AS USER_ID,
		U.USERNAME AS USER_NAME,
		U.EMAIL AS USER_EMAIL,
		U.FIRST_NAME AS FIRST_NAME,
		U.LAST_NAME AS LAST_NAME,
		U.PHONE AS
		TELEPHONE,
		US.ID AS USER_SETTING_ID,
		U.TYPE AS USER_TYPE,
		US.SALE_ON_BEHALF_OF AS SALE_ON_BEHALF_OF, -- deprecated
		R.ID AS
		ROLE_ID,
		R.NAME AS ROLE_NAME,
		G.ID AS GROUP_ID,
		G.NAME AS GROUP_NAME,
		OG.ORGANISATION_ID AS ORG_ID,
		O.PARENT_ID AS ORG_PARENT_ID,
		O.ORG_CODE AS ORG_CODE,
		O.SHORTNAME AS ORG_SHORT_NAME,
		O.NAME AS
		ORG_NAME,
		O.ORDER_SETTINGS_ID AS ORG_SETTINGS_ID,
		SL.CODE AS
		SALUT_CODE,
		SL.ID AS
		SALUT_ID,
		L.FIRST_LOGIN_DATE AS FIRST_LOGIN_DATE,
		U.SIGN_IN_DATE
		AS LAST_LOGIN_DATE
		from
		dbo.ESHOP_USER U
		JOIN dbo.GROUP_USER GU ON
		U.ID = GU.USER_ID
		JOIN dbo.ESHOP_GROUP G ON GU.GROUP_ID = G.ID
		JOIN
		dbo.GROUP_ROLE GR ON GR.GROUP_ID = G.ID
		JOIN dbo.ESHOP_ROLE R ON
		GR.ROLE_ID = R.ID
		JOIN dbo.ORGANISATION_GROUP OG ON G.ID =
		OG.GROUP_ID
		JOIN dbo.ORGANISATION O ON O.ID = OG.ORGANISATION_ID
		JOIN dbo.LOGIN L ON L.USER_ID = U.ID
		JOIN dbo.USER_SETTINGS US ON
		US.ID = U.SETTING
		JOIN dbo.SALUTATION SL ON SL.ID = U.SALUTATION
		WHERE L.IS_USER_ACTIVE = 1
    </sql>
  </changeSet>
  
  <changeSet author="CONNECT_APP" id="ITER_109_ALTER_VIEW_V_FINAL_CUSTOMER_ADD_STATUS_AND_HAS_IN_PROGRESS_ORDERS_FIELDS">
    <sql>
    ALTER VIEW [dbo].[V_FINAL_CUSTOMER] AS
      SELECT
      ORG.ID AS ORG_ID,
      ORG.NAME AS NAME,
      ORG.DESCRIPTION AS DESCRIPTION,
      ORG.PARENT_ID AS PARENT_ORG_ID,
      STUFF((SELECT CAST(' ' AS varchar(max)) + FP.VALUE FROM FINAL_CUSTOMER_PROPERTY FP
      WHERE FP.ORG_ID = ORG.ID AND FP.SETTING_KEY = 'TYPE' FOR XML
      PATH(''), TYPE).value('.', 'varchar(max)'), 1, 1, '') AS
      FINAL_CUSTOMER_TYPE,
      STUFF((SELECT CAST(' ' AS varchar(max)) + FP.VALUE FROM FINAL_CUSTOMER_PROPERTY FP
      WHERE FP.ORG_ID = ORG.ID AND FP.SETTING_KEY IN ('STREET', 'POSTCODE', 'PLACE') ORDER BY
      (CASE FP.SETTING_KEY  WHEN 'STREET' THEN 1 WHEN 'POSTCODE' THEN 2 WHEN 'PLACE' THEN 3 END) ASC FOR XML PATH(''),
      TYPE).value('.', 'varchar(max)'), 1, 1, '') AS ADDRESS_INFO,
      STUFF((SELECT CAST(' ' AS varchar(max)) + FP.VALUE FROM
      FINAL_CUSTOMER_PROPERTY FP WHERE FP.ORG_ID = ORG.ID AND
      FP.SETTING_KEY IN ('SURNAME', 'FIRSTNAME')  ORDER BY
      (CASE FP.SETTING_KEY  WHEN 'SURNAME' THEN 1 WHEN 'FIRSTNAME' THEN 2 END) ASC FOR XML PATH(''),
      TYPE).value('.', 'varchar(max)'), 1, 1, '') AS CONTACT_INFO,
	  (SELECT FP.VALUE FROM FINAL_CUSTOMER_PROPERTY FP WHERE FP.ORG_ID = ORG.ID AND FP.SETTING_KEY = 'STATUS') AS STATUS,
	  (SELECT CASE WHEN COUNT(FO.ID) > 0 THEN '0' ELSE '1' END FROM FINAL_CUSTOMER_ORDER FO WHERE FO.ORG_ID = ORG.ID AND FO.STATUS IN('NEW','OPEN')) AS HAS_IN_PROGRESS_ORDERS
      FROM [dbo].ORGANISATION ORG
      INNER JOIN [dbo].ORGANISATION_TYPE ORG_TYPE ON ORG.ORGTYPE_ID =
      ORG_TYPE.ID
      WHERE ORG_TYPE.NAME = 'FINAL_CUSTOMER';
    </sql>
  </changeSet>
  
  <changeSet author="CONNECT_APP" id="ITER_109_CREATE_VIEW_V_COLLECTION_SEARCH_REMOVE_JOIN_WITH_COLLECTION_RELATION">
    <sql>

	ALTER VIEW [dbo].[V_COLLECTION_SEARCH] AS
	SELECT temp.NAME COLLECTION_NAME,
	temp.SHORTNAME AFFILIATE,
	STUFF(
	(SELECT CAST(', ' AS varchar(max)) + L.ORG_CODE
	FROM ORGANISATION as L
	WHERE L.ID in (
	select top 5 LR.ORGANISATION_ID FROM COLLECTION_RELATION LR
	WHERE LR.COLLECTION_ID = temp.ID ) and L.ORGTYPE_ID='3'
	FOR XML PATH(''), TYPE
	)
	.value('.', 'varchar(max)'),1, 1,'') AS CUSTOMER_NR,
	temp.COLLECTION_SHORT_NAME COLLECTION_SHORT_NAME
	FROM (
	SELECT DISTINCT orgColl.ID, orgColl.NAME, aff.SHORTNAME, orgColl.SHORTNAME
	COLLECTION_SHORT_NAME from
	ORGANISATION_COLLECTION orgColl
	join ORGANISATION aff on aff.ID = orgColl.AFFILIATE_ID
	where aff.SHORTNAME != 'sag'
	) AS temp
    </sql>
  </changeSet>
  <changeSet author="CONNECT_APP" id="ITER_114_UPDATE_PERMISSION_FOR_DEFAULT_COLLECTION">
    <sql>
      INSERT INTO [dbo].[COLLECTION_PERMISSION] (COLLECTION_ID, ESHOP_PERMISSION_ID)
      SELECT orgCol.ID, p.ID FROM ESHOP_PERMISSION p, ORGANISATION_COLLECTION orgCol
      WHERE orgCol.SHORTNAME='derendinger-ch' AND p.PERMISSION NOT IN ('WHOLESALER')
      AND p.ID NOT IN (SELECT cp.ESHOP_PERMISSION_ID from COLLECTION_PERMISSION cp WHERE COLLECTION_ID = orgCol.ID);

      INSERT INTO [dbo].[COLLECTION_PERMISSION] (COLLECTION_ID, ESHOP_PERMISSION_ID)
      SELECT orgCol.ID, p.ID FROM ESHOP_PERMISSION p, ORGANISATION_COLLECTION orgCol
      WHERE orgCol.SHORTNAME='technomag' AND p.PERMISSION NOT IN ('WHOLESALER', 'OIL')
      AND p.ID NOT IN (SELECT cp.ESHOP_PERMISSION_ID from COLLECTION_PERMISSION cp WHERE COLLECTION_ID = orgCol.ID);

      INSERT INTO [dbo].[COLLECTION_PERMISSION] (COLLECTION_ID, ESHOP_PERMISSION_ID)
      SELECT orgCol.ID, p.ID FROM ESHOP_PERMISSION p, ORGANISATION_COLLECTION orgCol
      WHERE orgCol.SHORTNAME='derendinger-at' AND p.PERMISSION NOT IN ('')
      AND p.ID NOT IN (SELECT cp.ESHOP_PERMISSION_ID from COLLECTION_PERMISSION cp WHERE COLLECTION_ID = orgCol.ID);

      INSERT INTO [dbo].[COLLECTION_PERMISSION] (COLLECTION_ID, ESHOP_PERMISSION_ID)
      SELECT orgCol.ID, p.ID FROM ESHOP_PERMISSION p, ORGANISATION_COLLECTION orgCol
      WHERE orgCol.SHORTNAME='matik-at' AND p.PERMISSION NOT IN ('')
      AND p.ID NOT IN (SELECT cp.ESHOP_PERMISSION_ID from COLLECTION_PERMISSION cp WHERE COLLECTION_ID = orgCol.ID);

      INSERT INTO [dbo].[COLLECTION_PERMISSION] (COLLECTION_ID, ESHOP_PERMISSION_ID)
      SELECT orgCol.ID, p.ID FROM ESHOP_PERMISSION p, ORGANISATION_COLLECTION orgCol
      WHERE orgCol.SHORTNAME='matik-ch' AND p.PERMISSION NOT IN ('WHOLESALER', 'OIL')
      AND p.ID NOT IN (SELECT cp.ESHOP_PERMISSION_ID from COLLECTION_PERMISSION cp WHERE COLLECTION_ID = orgCol.ID);

      INSERT INTO [dbo].[COLLECTION_PERMISSION] (COLLECTION_ID, ESHOP_PERMISSION_ID)
      SELECT orgCol.ID, p.ID FROM ESHOP_PERMISSION p, ORGANISATION_COLLECTION orgCol
      WHERE orgCol.SHORTNAME='wbb' AND p.PERMISSION NOT IN ('OFFER')
      AND p.ID NOT IN (SELECT cp.ESHOP_PERMISSION_ID from COLLECTION_PERMISSION cp WHERE COLLECTION_ID = orgCol.ID);

      INSERT INTO [dbo].[COLLECTION_PERMISSION] (COLLECTION_ID, ESHOP_PERMISSION_ID)
      SELECT orgCol.ID, p.ID FROM ESHOP_PERMISSION p, ORGANISATION_COLLECTION orgCol
      WHERE orgCol.SHORTNAME='rbe' AND p.PERMISSION NOT IN ('WHOLESALER', 'OFFER')
      AND p.ID NOT IN (SELECT cp.ESHOP_PERMISSION_ID from COLLECTION_PERMISSION cp WHERE COLLECTION_ID = orgCol.ID);
    </sql>
  </changeSet>
  
  <changeSet author="CONNECT_APP" id="ITER_115_INSERT_TITLE_FOR_SAG_COLLECTION">
     <sql>
     IF NOT EXISTS
     (SELECT 1 FROM ORG_COLLECTION_SETTINGS cs JOIN ORGANISATION_COLLECTION oc on oc.ID = cs.COLLECTION_ID WHERE oc.SHORTNAME='sag' AND cs.SETTING_KEY = 'title')
     BEGIN
     INSERT INTO [dbo].[ORG_COLLECTION_SETTINGS] ([COLLECTION_ID], [SETTING_KEY], [SETTING_VALUE])
     SELECT ID, 'title', 'SAG'
     FROM ORGANISATION_COLLECTION
     WHERE SHORTNAME='sag'
     END;
     </sql>
  </changeSet>

  <changeSet author="CONNECT_APP" id="ITER_115_INSERT_SETTING_LOCALE_FOR_SAG_COLLECTION">
     <sql>
         IF NOT EXISTS
         (SELECT 1 FROM ORG_COLLECTION_SETTINGS cs JOIN ORGANISATION_COLLECTION oc on oc.ID = cs.COLLECTION_ID WHERE oc.SHORTNAME='sag' AND cs.SETTING_KEY = 'setting_locale')
         BEGIN
         INSERT INTO [dbo].[ORG_COLLECTION_SETTINGS] ([COLLECTION_ID], [SETTING_KEY], [SETTING_VALUE])
         SELECT ID, 'setting_locale', 'de_DE'
         FROM ORGANISATION_COLLECTION
         WHERE SHORTNAME='sag'
         END;
     </sql>
  </changeSet>

</databaseChangeLog>